const PathUtils=require("./PathUtils");class Comparator{constructor(t,e,a){this.options=t,this.result=e,this.regexValidator=a}compareObjects(t={},e={},a=""){if(null===t||null===e)return void this.compareValues(t,e,a);if(Array.isArray(t)&&Array.isArray(e))return void this.compareArrays(t,e,a);if("object"!=typeof t||"object"!=typeof e)return void this.compareValues(t,e,a);const s=Object.keys(t).filter((t=>!this.options.ignoredKeys.includes(t)));for(const o of s){const s=PathUtils.buildPath(a,o);o in e?(this.result.addMatchedKey(s),"object"==typeof t[o]&&null!==t[o]&&"object"==typeof e[o]&&null!==e[o]?this.compareObjects(t[o],e[o],s):this.compareValues(t[o],e[o],s)):this.result.addUnmatchedKey({path:s,value:t[o],message:"Key exists in object 1 but not in object 2"})}if(!this.options.ignoreExtraKeys)for(const s of Object.keys(e))if(!this.options.ignoredKeys.includes(s)&&!(s in t)){const t=PathUtils.buildPath(a,s);this.result.addUnmatchedKey({path:t,value:e[s],message:"Key exists in object 2 but not in object 1"})}}compareArrays(t,e,a){t.length!==e.length&&this.result.addUnmatchedValue({path:a,expected:`Array of length ${t.length}`,actual:`Array of length ${e.length}`,message:"Array lengths do not match"});const s=Math.min(t.length,e.length);for(let o=0;o<s;o++){const s=PathUtils.buildArrayPath(a,o);"object"==typeof t[o]&&null!==t[o]&&"object"==typeof e[o]&&null!==e[o]?this.compareObjects(t[o],e[o],s):this.compareValues(t[o],e[o],s)}for(let e=s;e<t.length;e++){const s=PathUtils.buildArrayPath(a,e);this.result.addUnmatchedValue({path:s,expected:t[e],actual:void 0,message:"Extra element in first array"})}for(let t=s;t<e.length;t++){const s=PathUtils.buildArrayPath(a,t);this.result.addUnmatchedValue({path:s,expected:void 0,actual:e[t],message:"Extra element in second array"})}}compareValues(t,e,a){for(const[s,o]of Object.entries(this.options.equivalentValues))if(Array.isArray(o)&&o.includes(t)&&o.includes(e))return void this.result.addMatchedValue({path:a,value:`${t} â‰ˆ ${e}`,message:`Values considered equivalent by rule "${s}"`});this.options.strictTypes&&typeof t!=typeof e?this.result.addUnmatchedType({path:a,expected:typeof t,actual:typeof e,message:"Types do not match"}):(t===e?this.result.addMatchedValue({path:a,value:t}):this.result.addUnmatchedValue({path:a,expected:t,actual:e,message:"Values do not match"}),this.regexValidator.validateValue(e,a))}}module.exports=Comparator;